Limits:
    O


Problem:
    Ford motors would like a system for fast delivery of applications from a secure repository. 



Key Learning Points

*   We need to find out how they are doing filtration for malicious applications. There are several functionality features that need to be considered. 
    > Potential Solutions
        * Strict filtration and bug/malicious code checks at Submission to Fords repository
            - Require that the app pass certain functionality restrictions restraining its ability to control anything other than what is required for the app (permissions)
            - Performance within the bounds of available system resources at run time 
            - Rigorous inspection for memory violations or undefined behavior
        * Hardware segregation and segmented memory/os
            - Package can run as a peripheral to the main system as a stand alone process
            or Package can be placed on its own cpu/physical device and interface with the main control system through restricted channels
            

Solution:
    Language: Go : reasons :: go NATIVELY contains all of the tools needed for package management. This will reduce storage and dependency bloat from exterior package management utilities

+---------+
| Vehicle |
+---------+
    | 
    V
+----------+
| Request  |
+----------+
    |
    V
+-----------+
| Repository| verified
|    API    |---------->
+-----------+ message
